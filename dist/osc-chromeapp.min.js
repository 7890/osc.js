/*! osc.js 2.2.0, Copyright 2017 Colin Clark | github.com/colinbdclark/osc.js */


var osc = osc || {};

!function() {
    "use strict";
    osc.SECS_70YRS = 2208988800, osc.TWO_32 = 4294967296, osc.defaults = {
        metadata: !1,
        unpackSingleArgs: !0
    }, osc.isCommonJS = !("undefined" == typeof module || !module.exports), osc.isNode = osc.isCommonJS && "undefined" == typeof window, 
    osc.isElectron = !("undefined" == typeof process || !process.versions || !process.versions.electron), 
    osc.isBufferEnv = osc.isNode || osc.isElectron, osc.isArray = function(t) {
        return t && "[object Array]" === Object.prototype.toString.call(t);
    }, osc.isTypedArrayView = function(t) {
        return t.buffer && t.buffer instanceof ArrayBuffer;
    }, osc.isBuffer = function(t) {
        return osc.isBufferEnv && t instanceof Buffer;
    };
    var t = "undefined" != typeof dcodeIO ? dcodeIO.Long : void 0 !== t ? t : osc.isNode ? require("long") : void 0;
    osc.dataView = function(t, e, r) {
        return t.buffer ? new DataView(t.buffer, e, r) : t instanceof ArrayBuffer ? new DataView(t, e, r) : new DataView(new Uint8Array(t), e, r);
    }, osc.byteArray = function(t) {
        if (t instanceof Uint8Array) return t;
        var e = t.buffer ? t.buffer : t;
        if (!(e instanceof ArrayBuffer || void 0 !== e.length && "string" != typeof e)) throw new Error("Can't wrap a non-array-like object as Uint8Array. Object was: " + JSON.stringify(t, null, 2));
        return new Uint8Array(e);
    }, osc.nativeBuffer = function(t) {
        return osc.isBufferEnv ? osc.isBuffer(t) ? t : new Buffer(t.buffer ? t : new Uint8Array(t)) : osc.isTypedArrayView(t) ? t : new Uint8Array(t);
    }, osc.copyByteArray = function(t, e, r) {
        if (osc.isTypedArrayView(t) && osc.isTypedArrayView(e)) e.set(t, r); else for (var i = void 0 === r ? 0 : r, n = Math.min(e.length - r, t.length), s = 0, o = i; s < n; s++, 
        o++) e[o] = t[s];
        return e;
    }, osc.readString = function(t, e) {
        for (var r = [], i = e.idx; i < t.byteLength; i++) {
            var n = t.getUint8(i);
            if (0 === n) {
                i++;
                break;
            }
            r.push(n);
        }
        return i = i + 3 & -4, e.idx = i, String.fromCharCode.apply(null, r);
    }, osc.writeString = function(t) {
        for (var e = t + "\0", r = e.length + 3 & -4, i = new Uint8Array(r), n = 0; n < e.length; n++) {
            var s = e.charCodeAt(n);
            i[n] = s;
        }
        return i;
    }, osc.readPrimitive = function(t, e, r, i) {
        var n = t[e](i.idx, !1);
        return i.idx += r, n;
    }, osc.writePrimitive = function(t, e, r, i, n) {
        n = void 0 === n ? 0 : n;
        var s;
        return e ? s = new Uint8Array(e.buffer) : (s = new Uint8Array(i), e = new DataView(s.buffer)), 
        e[r](n, t, !1), s;
    }, osc.readInt32 = function(t, e) {
        return osc.readPrimitive(t, "getInt32", 4, e);
    }, osc.writeInt32 = function(t, e, r) {
        return osc.writePrimitive(t, e, "setInt32", 4, r);
    }, osc.readInt64 = function(e, r) {
        var i = osc.readPrimitive(e, "getInt32", 4, r), n = osc.readPrimitive(e, "getInt32", 4, r);
        return t ? new t(n, i) : {
            high: i,
            low: n,
            unsigned: !1
        };
    }, osc.writeInt64 = function(t, e, r) {
        var i = new Uint8Array(8);
        return i.set(osc.writePrimitive(t.high, e, "setInt32", 4, r), 0), i.set(osc.writePrimitive(t.low, e, "setInt32", 4, r + 4), 4), 
        i;
    }, osc.readFloat32 = function(t, e) {
        return osc.readPrimitive(t, "getFloat32", 4, e);
    }, osc.writeFloat32 = function(t, e, r) {
        return osc.writePrimitive(t, e, "setFloat32", 4, r);
    }, osc.readFloat64 = function(t, e) {
        return osc.readPrimitive(t, "getFloat64", 8, e);
    }, osc.writeFloat64 = function(t, e, r) {
        return osc.writePrimitive(t, e, "setFloat64", 8, r);
    }, osc.readChar32 = function(t, e) {
        var r = osc.readPrimitive(t, "getUint32", 4, e);
        return String.fromCharCode(r);
    }, osc.writeChar32 = function(t, e, r) {
        var i = t.charCodeAt(0);
        if (!(void 0 === i || i < -1)) return osc.writePrimitive(i, e, "setUint32", 4, r);
    }, osc.readBlob = function(t, e) {
        var r = osc.readInt32(t, e), i = r + 3 & -4, n = new Uint8Array(t.buffer, e.idx, r);
        return e.idx += i, n;
    }, osc.writeBlob = function(t) {
        var e = (t = osc.byteArray(t)).byteLength, r = (e + 3 & -4) + 4, i = new Uint8Array(r), n = new DataView(i.buffer);
        return osc.writeInt32(e, n), i.set(t, 4), i;
    }, osc.readMIDIBytes = function(t, e) {
        var r = new Uint8Array(t.buffer, e.idx, 4);
        return e.idx += 4, r;
    }, osc.writeMIDIBytes = function(t) {
        t = osc.byteArray(t);
        var e = new Uint8Array(4);
        return e.set(t), e;
    }, osc.readColor = function(t, e) {
        var r = new Uint8Array(t.buffer, e.idx, 4), i = r[3] / 255;
        return e.idx += 4, {
            r: r[0],
            g: r[1],
            b: r[2],
            a: i
        };
    }, osc.writeColor = function(t) {
        var e = Math.round(255 * t.a);
        return new Uint8Array([ t.r, t.g, t.b, e ]);
    }, osc.readTrue = function() {
        return !0;
    }, osc.readFalse = function() {
        return !1;
    }, osc.readNull = function() {
        return null;
    }, osc.readImpulse = function() {
        return 1;
    }, osc.readTimeTag = function(t, e) {
        var r = osc.readPrimitive(t, "getUint32", 4, e), i = osc.readPrimitive(t, "getUint32", 4, e);
        return {
            raw: [ r, i ],
            native: 0 === r && 1 === i ? Date.now() : osc.ntpToJSTime(r, i)
        };
    }, osc.writeTimeTag = function(t) {
        var e = t.raw ? t.raw : osc.jsToNTPTime(t.native), r = new Uint8Array(8), i = new DataView(r.buffer);
        return osc.writeInt32(e[0], i, 0), osc.writeInt32(e[1], i, 4), r;
    }, osc.timeTag = function(t, e) {
        t = t || 0;
        var r = (e = e || Date.now()) / 1e3, i = Math.floor(r), n = r - i, s = Math.floor(t), o = n + (t - s);
        if (o > 1) {
            var a = Math.floor(o);
            s += a, o = o - a;
        }
        return {
            raw: [ i + s + osc.SECS_70YRS, Math.round(osc.TWO_32 * o) ]
        };
    }, osc.ntpToJSTime = function(t, e) {
        return 1e3 * (t - osc.SECS_70YRS + e / osc.TWO_32);
    }, osc.jsToNTPTime = function(t) {
        var e = t / 1e3, r = Math.floor(e), i = e - r;
        return [ r + osc.SECS_70YRS, Math.round(osc.TWO_32 * i) ];
    }, osc.readArguments = function(t, e, r) {
        var i = osc.readString(t, r);
        if (0 !== i.indexOf(",")) throw new Error("A malformed type tag string was found while reading the arguments of an OSC message. String was: " + i, " at offset: " + r.idx);
        var n = i.substring(1).split(""), s = [];
        return osc.readArgumentsIntoArray(s, n, i, t, e, r), s;
    }, osc.readArgument = function(t, e, r, i, n) {
        var s = osc.argumentTypes[t];
        if (!s) throw new Error("'" + t + "' is not a valid OSC type tag. Type tag string was: " + e);
        var o = s.reader, a = osc[o](r, n);
        return i.metadata && (a = {
            type: t,
            value: a
        }), a;
    }, osc.readArgumentsIntoArray = function(t, e, r, i, n, s) {
        for (var o = 0; o < e.length; ) {
            var a, c = e[o];
            if ("[" === c) {
                var u = e.slice(o + 1), h = u.indexOf("]");
                if (h < 0) throw new Error("Invalid argument type tag: an open array type tag ('[') was found without a matching close array tag ('[]'). Type tag was: " + r);
                var f = u.slice(0, h);
                a = osc.readArgumentsIntoArray([], f, r, i, n, s), o += h + 2;
            } else a = osc.readArgument(c, r, i, n, s), o++;
            t.push(a);
        }
        return t;
    }, osc.writeArguments = function(t, e) {
        var r = osc.collectArguments(t, e);
        return osc.joinParts(r);
    }, osc.joinParts = function(t) {
        for (var e = new Uint8Array(t.byteLength), r = t.parts, i = 0, n = 0; n < r.length; n++) {
            var s = r[n];
            osc.copyByteArray(s, e, i), i += s.length;
        }
        return e;
    }, osc.addDataPart = function(t, e) {
        e.parts.push(t), e.byteLength += t.length;
    }, osc.writeArrayArguments = function(t, e) {
        for (var r = "[", i = 0; i < t.length; i++) {
            var n = t[i];
            r += osc.writeArgument(n, e);
        }
        return r += "]";
    }, osc.writeArgument = function(t, e) {
        if (osc.isArray(t)) return osc.writeArrayArguments(t, e);
        var r = t.type, i = osc.argumentTypes[r].writer;
        if (i) {
            var n = osc[i](t.value);
            osc.addDataPart(n, e);
        }
        return t.type;
    }, osc.collectArguments = function(t, e, r) {
        osc.isArray(t) || (t = void 0 === t ? [] : [ t ]), r = r || {
            byteLength: 0,
            parts: []
        }, e.metadata || (t = osc.annotateArguments(t));
        for (var i = ",", n = r.parts.length, s = 0; s < t.length; s++) {
            var o = t[s];
            i += osc.writeArgument(o, r);
        }
        var a = osc.writeString(i);
        return r.byteLength += a.byteLength, r.parts.splice(n, 0, a), r;
    }, osc.readMessage = function(t, e, r) {
        e = e || osc.defaults;
        var i = osc.dataView(t, t.byteOffset, t.byteLength);
        r = r || {
            idx: 0
        };
        var n = osc.readString(i, r);
        return osc.readMessageContents(n, i, e, r);
    }, osc.readMessageContents = function(t, e, r, i) {
        if (0 !== t.indexOf("/")) throw new Error("A malformed OSC address was found while reading an OSC message. String was: " + t);
        var n = osc.readArguments(e, r, i);
        return {
            address: t,
            args: 1 === n.length && r.unpackSingleArgs ? n[0] : n
        };
    }, osc.collectMessageParts = function(t, e, r) {
        return r = r || {
            byteLength: 0,
            parts: []
        }, osc.addDataPart(osc.writeString(t.address), r), osc.collectArguments(t.args, e, r);
    }, osc.writeMessage = function(t, e) {
        if (e = e || osc.defaults, !osc.isValidMessage(t)) throw new Error("An OSC message must contain a valid address. Message was: " + JSON.stringify(t, null, 2));
        var r = osc.collectMessageParts(t, e);
        return osc.joinParts(r);
    }, osc.isValidMessage = function(t) {
        return t.address && 0 === t.address.indexOf("/");
    }, osc.readBundle = function(t, e, r) {
        return osc.readPacket(t, e, r);
    }, osc.collectBundlePackets = function(t, e, r) {
        r = r || {
            byteLength: 0,
            parts: []
        }, osc.addDataPart(osc.writeString("#bundle"), r), osc.addDataPart(osc.writeTimeTag(t.timeTag), r);
        for (var i = 0; i < t.packets.length; i++) {
            var n = t.packets[i], s = (n.address ? osc.collectMessageParts : osc.collectBundlePackets)(n, e);
            r.byteLength += s.byteLength, osc.addDataPart(osc.writeInt32(s.byteLength), r), 
            r.parts = r.parts.concat(s.parts);
        }
        return r;
    }, osc.writeBundle = function(t, e) {
        if (!osc.isValidBundle(t)) throw new Error("An OSC bundle must contain 'timeTag' and 'packets' properties. Bundle was: " + JSON.stringify(t, null, 2));
        e = e || osc.defaults;
        var r = osc.collectBundlePackets(t, e);
        return osc.joinParts(r);
    }, osc.isValidBundle = function(t) {
        return void 0 !== t.timeTag && void 0 !== t.packets;
    }, osc.readBundleContents = function(t, e, r, i) {
        for (var n = osc.readTimeTag(t, r), s = []; r.idx < i; ) {
            var o = osc.readInt32(t, r), a = r.idx + o, c = osc.readPacket(t, e, r, a);
            s.push(c);
        }
        return {
            timeTag: n,
            packets: s
        };
    }, osc.readPacket = function(t, e, r, i) {
        var n = osc.dataView(t, t.byteOffset, t.byteLength);
        i = void 0 === i ? n.byteLength : i, r = r || {
            idx: 0
        };
        var s = osc.readString(n, r), o = s[0];
        if ("#" === o) return osc.readBundleContents(n, e, r, i);
        if ("/" === o) return osc.readMessageContents(s, n, e, r);
        throw new Error("The header of an OSC packet didn't contain an OSC address or a #bundle string. Header was: " + s);
    }, osc.writePacket = function(t, e) {
        if (osc.isValidMessage(t)) return osc.writeMessage(t, e);
        if (osc.isValidBundle(t)) return osc.writeBundle(t, e);
        throw new Error("The specified packet was not recognized as a valid OSC message or bundle. Packet was: " + JSON.stringify(t, null, 2));
    }, osc.argumentTypes = {
        i: {
            reader: "readInt32",
            writer: "writeInt32"
        },
        h: {
            reader: "readInt64",
            writer: "writeInt64"
        },
        f: {
            reader: "readFloat32",
            writer: "writeFloat32"
        },
        s: {
            reader: "readString",
            writer: "writeString"
        },
        S: {
            reader: "readString",
            writer: "writeString"
        },
        b: {
            reader: "readBlob",
            writer: "writeBlob"
        },
        t: {
            reader: "readTimeTag",
            writer: "writeTimeTag"
        },
        T: {
            reader: "readTrue"
        },
        F: {
            reader: "readFalse"
        },
        N: {
            reader: "readNull"
        },
        I: {
            reader: "readImpulse"
        },
        d: {
            reader: "readFloat64",
            writer: "writeFloat64"
        },
        c: {
            reader: "readChar32",
            writer: "writeChar32"
        },
        r: {
            reader: "readColor",
            writer: "writeColor"
        },
        m: {
            reader: "readMIDIBytes",
            writer: "writeMIDIBytes"
        }
    }, osc.inferTypeForArgument = function(t) {
        switch (typeof t) {
          case "boolean":
            return t ? "T" : "F";

          case "string":
            return "s";

          case "number":
            return "f";

          case "undefined":
            return "N";

          case "object":
            if (null === t) return "N";
            if (t instanceof Uint8Array || t instanceof ArrayBuffer) return "b";
            if ("number" == typeof t.high && "number" == typeof t.low) return "h";
        }
        throw new Error("Can't infer OSC argument type for value: " + JSON.stringify(t, null, 2));
    }, osc.annotateArguments = function(t) {
        for (var e = [], r = 0; r < t.length; r++) {
            var i, n = t[r];
            i = "object" == typeof n && n.type && void 0 !== n.value ? n : osc.isArray(n) ? osc.annotateArguments(n) : {
                type: osc.inferTypeForArgument(n),
                value: n
            }, e.push(i);
        }
        return e;
    }, osc.isCommonJS && (module.exports = osc);
}(), function(t, e) {
    "function" == typeof define && define.amd ? define([], e) : "function" == typeof require && "object" == typeof module && module && module.exports ? module.exports = e() : (t.dcodeIO = t.dcodeIO || {}).Long = e();
}(this, function() {
    "use strict";
    function t(t, e, r) {
        this.low = 0 | t, this.high = 0 | e, this.unsigned = !!r;
    }
    function e(t) {
        return !0 === (t && t.__isLong__);
    }
    function r(t, e) {
        var r, i, s;
        return e ? (t >>>= 0, (s = 0 <= t && t < 256) && (i = c[t]) ? i : (r = n(t, (0 | t) < 0 ? -1 : 0, !0), 
        s && (c[t] = r), r)) : (t |= 0, (s = -128 <= t && t < 128) && (i = a[t]) ? i : (r = n(t, t < 0 ? -1 : 0, !1), 
        s && (a[t] = r), r));
    }
    function i(t, e) {
        if (isNaN(t) || !isFinite(t)) return e ? p : g;
        if (e) {
            if (t < 0) return p;
            if (t >= f) return b;
        } else {
            if (t <= -d) return S;
            if (t + 1 >= d) return w;
        }
        return t < 0 ? i(-t, e).neg() : n(t % h | 0, t / h | 0, e);
    }
    function n(e, r, i) {
        return new t(e, r, i);
    }
    function s(t, e, r) {
        if (0 === t.length) throw Error("empty string");
        if ("NaN" === t || "Infinity" === t || "+Infinity" === t || "-Infinity" === t) return g;
        if ("number" == typeof e ? (r = e, e = !1) : e = !!e, (r = r || 10) < 2 || 36 < r) throw RangeError("radix");
        var n;
        if ((n = t.indexOf("-")) > 0) throw Error("interior hyphen");
        if (0 === n) return s(t.substring(1), e, r).neg();
        for (var o = i(u(r, 8)), a = g, c = 0; c < t.length; c += 8) {
            var h = Math.min(8, t.length - c), f = parseInt(t.substring(c, c + h), r);
            if (h < 8) {
                var d = i(u(r, h));
                a = a.mul(d).add(i(f));
            } else a = (a = a.mul(o)).add(i(f));
        }
        return a.unsigned = e, a;
    }
    function o(e) {
        return e instanceof t ? e : "number" == typeof e ? i(e) : "string" == typeof e ? s(e) : n(e.low, e.high, e.unsigned);
    }
    t.prototype.__isLong__, Object.defineProperty(t.prototype, "__isLong__", {
        value: !0,
        enumerable: !1,
        configurable: !1
    }), t.isLong = e;
    var a = {}, c = {};
    t.fromInt = r, t.fromNumber = i, t.fromBits = n;
    var u = Math.pow;
    t.fromString = s, t.fromValue = o;
    var h = 4294967296, f = h * h, d = f / 2, l = r(1 << 24), g = r(0);
    t.ZERO = g;
    var p = r(0, !0);
    t.UZERO = p;
    var m = r(1);
    t.ONE = m;
    var v = r(1, !0);
    t.UONE = v;
    var y = r(-1);
    t.NEG_ONE = y;
    var w = n(-1, 2147483647, !1);
    t.MAX_VALUE = w;
    var b = n(-1, -1, !0);
    t.MAX_UNSIGNED_VALUE = b;
    var S = n(0, -2147483648, !1);
    t.MIN_VALUE = S;
    var E = t.prototype;
    return E.toInt = function() {
        return this.unsigned ? this.low >>> 0 : this.low;
    }, E.toNumber = function() {
        return this.unsigned ? (this.high >>> 0) * h + (this.low >>> 0) : this.high * h + (this.low >>> 0);
    }, E.toString = function(t) {
        if ((t = t || 10) < 2 || 36 < t) throw RangeError("radix");
        if (this.isZero()) return "0";
        if (this.isNegative()) {
            if (this.eq(S)) {
                var e = i(t), r = this.div(e), n = r.mul(e).sub(this);
                return r.toString(t) + n.toInt().toString(t);
            }
            return "-" + this.neg().toString(t);
        }
        for (var s = i(u(t, 6), this.unsigned), o = this, a = ""; ;) {
            var c = o.div(s), h = (o.sub(c.mul(s)).toInt() >>> 0).toString(t);
            if ((o = c).isZero()) return h + a;
            for (;h.length < 6; ) h = "0" + h;
            a = "" + h + a;
        }
    }, E.getHighBits = function() {
        return this.high;
    }, E.getHighBitsUnsigned = function() {
        return this.high >>> 0;
    }, E.getLowBits = function() {
        return this.low;
    }, E.getLowBitsUnsigned = function() {
        return this.low >>> 0;
    }, E.getNumBitsAbs = function() {
        if (this.isNegative()) return this.eq(S) ? 64 : this.neg().getNumBitsAbs();
        for (var t = 0 != this.high ? this.high : this.low, e = 31; e > 0 && 0 == (t & 1 << e); e--) ;
        return 0 != this.high ? e + 33 : e + 1;
    }, E.isZero = function() {
        return 0 === this.high && 0 === this.low;
    }, E.isNegative = function() {
        return !this.unsigned && this.high < 0;
    }, E.isPositive = function() {
        return this.unsigned || this.high >= 0;
    }, E.isOdd = function() {
        return 1 == (1 & this.low);
    }, E.isEven = function() {
        return 0 == (1 & this.low);
    }, E.equals = function(t) {
        return e(t) || (t = o(t)), (this.unsigned === t.unsigned || this.high >>> 31 != 1 || t.high >>> 31 != 1) && (this.high === t.high && this.low === t.low);
    }, E.eq = E.equals, E.notEquals = function(t) {
        return !this.eq(t);
    }, E.neq = E.notEquals, E.lessThan = function(t) {
        return this.comp(t) < 0;
    }, E.lt = E.lessThan, E.lessThanOrEqual = function(t) {
        return this.comp(t) <= 0;
    }, E.lte = E.lessThanOrEqual, E.greaterThan = function(t) {
        return this.comp(t) > 0;
    }, E.gt = E.greaterThan, E.greaterThanOrEqual = function(t) {
        return this.comp(t) >= 0;
    }, E.gte = E.greaterThanOrEqual, E.compare = function(t) {
        if (e(t) || (t = o(t)), this.eq(t)) return 0;
        var r = this.isNegative(), i = t.isNegative();
        return r && !i ? -1 : !r && i ? 1 : this.unsigned ? t.high >>> 0 > this.high >>> 0 || t.high === this.high && t.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(t).isNegative() ? -1 : 1;
    }, E.comp = E.compare, E.negate = function() {
        return !this.unsigned && this.eq(S) ? S : this.not().add(m);
    }, E.neg = E.negate, E.add = function(t) {
        e(t) || (t = o(t));
        var r = this.high >>> 16, i = 65535 & this.high, s = this.low >>> 16, a = 65535 & this.low, c = t.high >>> 16, u = 65535 & t.high, h = t.low >>> 16, f = 0, d = 0, l = 0, g = 0;
        return g += a + (65535 & t.low), l += g >>> 16, g &= 65535, l += s + h, d += l >>> 16, 
        l &= 65535, d += i + u, f += d >>> 16, d &= 65535, f += r + c, f &= 65535, n(l << 16 | g, f << 16 | d, this.unsigned);
    }, E.subtract = function(t) {
        return e(t) || (t = o(t)), this.add(t.neg());
    }, E.sub = E.subtract, E.multiply = function(t) {
        if (this.isZero()) return g;
        if (e(t) || (t = o(t)), t.isZero()) return g;
        if (this.eq(S)) return t.isOdd() ? S : g;
        if (t.eq(S)) return this.isOdd() ? S : g;
        if (this.isNegative()) return t.isNegative() ? this.neg().mul(t.neg()) : this.neg().mul(t).neg();
        if (t.isNegative()) return this.mul(t.neg()).neg();
        if (this.lt(l) && t.lt(l)) return i(this.toNumber() * t.toNumber(), this.unsigned);
        var r = this.high >>> 16, s = 65535 & this.high, a = this.low >>> 16, c = 65535 & this.low, u = t.high >>> 16, h = 65535 & t.high, f = t.low >>> 16, d = 65535 & t.low, p = 0, m = 0, v = 0, y = 0;
        return y += c * d, v += y >>> 16, y &= 65535, v += a * d, m += v >>> 16, v &= 65535, 
        v += c * f, m += v >>> 16, v &= 65535, m += s * d, p += m >>> 16, m &= 65535, m += a * f, 
        p += m >>> 16, m &= 65535, m += c * h, p += m >>> 16, m &= 65535, p += r * d + s * f + a * h + c * u, 
        p &= 65535, n(v << 16 | y, p << 16 | m, this.unsigned);
    }, E.mul = E.multiply, E.divide = function(t) {
        if (e(t) || (t = o(t)), t.isZero()) throw Error("division by zero");
        if (this.isZero()) return this.unsigned ? p : g;
        var r, n, s;
        if (this.unsigned) {
            if (t.unsigned || (t = t.toUnsigned()), t.gt(this)) return p;
            if (t.gt(this.shru(1))) return v;
            s = p;
        } else {
            if (this.eq(S)) return t.eq(m) || t.eq(y) ? S : t.eq(S) ? m : (r = this.shr(1).div(t).shl(1)).eq(g) ? t.isNegative() ? m : y : (n = this.sub(t.mul(r)), 
            s = r.add(n.div(t)));
            if (t.eq(S)) return this.unsigned ? p : g;
            if (this.isNegative()) return t.isNegative() ? this.neg().div(t.neg()) : this.neg().div(t).neg();
            if (t.isNegative()) return this.div(t.neg()).neg();
            s = g;
        }
        for (n = this; n.gte(t); ) {
            r = Math.max(1, Math.floor(n.toNumber() / t.toNumber()));
            for (var a = Math.ceil(Math.log(r) / Math.LN2), c = a <= 48 ? 1 : u(2, a - 48), h = i(r), f = h.mul(t); f.isNegative() || f.gt(n); ) f = (h = i(r -= c, this.unsigned)).mul(t);
            h.isZero() && (h = m), s = s.add(h), n = n.sub(f);
        }
        return s;
    }, E.div = E.divide, E.modulo = function(t) {
        return e(t) || (t = o(t)), this.sub(this.div(t).mul(t));
    }, E.mod = E.modulo, E.not = function() {
        return n(~this.low, ~this.high, this.unsigned);
    }, E.and = function(t) {
        return e(t) || (t = o(t)), n(this.low & t.low, this.high & t.high, this.unsigned);
    }, E.or = function(t) {
        return e(t) || (t = o(t)), n(this.low | t.low, this.high | t.high, this.unsigned);
    }, E.xor = function(t) {
        return e(t) || (t = o(t)), n(this.low ^ t.low, this.high ^ t.high, this.unsigned);
    }, E.shiftLeft = function(t) {
        return e(t) && (t = t.toInt()), 0 == (t &= 63) ? this : t < 32 ? n(this.low << t, this.high << t | this.low >>> 32 - t, this.unsigned) : n(0, this.low << t - 32, this.unsigned);
    }, E.shl = E.shiftLeft, E.shiftRight = function(t) {
        return e(t) && (t = t.toInt()), 0 == (t &= 63) ? this : t < 32 ? n(this.low >>> t | this.high << 32 - t, this.high >> t, this.unsigned) : n(this.high >> t - 32, this.high >= 0 ? 0 : -1, this.unsigned);
    }, E.shr = E.shiftRight, E.shiftRightUnsigned = function(t) {
        if (e(t) && (t = t.toInt()), 0 === (t &= 63)) return this;
        var r = this.high;
        return t < 32 ? n(this.low >>> t | r << 32 - t, r >>> t, this.unsigned) : 32 === t ? n(r, 0, this.unsigned) : n(r >>> t - 32, 0, this.unsigned);
    }, E.shru = E.shiftRightUnsigned, E.toSigned = function() {
        return this.unsigned ? n(this.low, this.high, !1) : this;
    }, E.toUnsigned = function() {
        return this.unsigned ? this : n(this.low, this.high, !0);
    }, E.toBytes = function(t) {
        return t ? this.toBytesLE() : this.toBytesBE();
    }, E.toBytesLE = function() {
        var t = this.high, e = this.low;
        return [ 255 & e, e >>> 8 & 255, e >>> 16 & 255, e >>> 24 & 255, 255 & t, t >>> 8 & 255, t >>> 16 & 255, t >>> 24 & 255 ];
    }, E.toBytesBE = function() {
        var t = this.high, e = this.low;
        return [ t >>> 24 & 255, t >>> 16 & 255, t >>> 8 & 255, 255 & t, e >>> 24 & 255, e >>> 16 & 255, e >>> 8 & 255, 255 & e ];
    }, t;
}), function(t, e) {
    "use strict";
    "object" == typeof exports ? (t.slip = exports, e(exports)) : "function" == typeof define && define.amd ? define([ "exports" ], function(r) {
        return t.slip = r, t.slip, e(r);
    }) : (t.slip = {}, e(t.slip));
}(this, function(t) {
    "use strict";
    var e = t;
    e.END = 192, e.ESC = 219, e.ESC_END = 220, e.ESC_ESC = 221, e.byteArray = function(t, e, r) {
        return t instanceof ArrayBuffer ? new Uint8Array(t, e, r) : t;
    }, e.expandByteArray = function(t) {
        var e = new Uint8Array(2 * t.length);
        return e.set(t), e;
    }, e.sliceByteArray = function(t, e, r) {
        var i = t.buffer.slice ? t.buffer.slice(e, r) : t.subarray(e, r);
        return new Uint8Array(i);
    }, e.encode = function(t, r) {
        (r = r || {}).bufferPadding = r.bufferPadding || 4;
        var i = (t = e.byteArray(t, r.offset, r.byteLength)).length + r.bufferPadding + 3 & -4, n = new Uint8Array(i), s = 1;
        n[0] = e.END;
        for (var o = 0; o < t.length; o++) {
            s > n.length - 3 && (n = e.expandByteArray(n));
            var a = t[o];
            a === e.END ? (n[s++] = e.ESC, a = e.ESC_END) : a === e.ESC && (n[s++] = e.ESC, 
            a = e.ESC_ESC), n[s++] = a;
        }
        return n[s] = e.END, e.sliceByteArray(n, 0, s + 1);
    }, e.Decoder = function(t) {
        t = "function" != typeof t ? t || {} : {
            onMessage: t
        }, this.maxMessageSize = t.maxMessageSize || 10485760, this.bufferSize = t.bufferSize || 1024, 
        this.msgBuffer = new Uint8Array(this.bufferSize), this.msgBufferIdx = 0, this.onMessage = t.onMessage, 
        this.onError = t.onError, this.escape = !1;
    };
    var r = e.Decoder.prototype;
    return r.decode = function(t) {
        t = e.byteArray(t);
        for (var r, i = 0; i < t.length; i++) {
            var n = t[i];
            if (this.escape) n === e.ESC_ESC ? n = e.ESC : n === e.ESC_END && (n = e.END); else {
                if (n === e.ESC) {
                    this.escape = !0;
                    continue;
                }
                if (n === e.END) {
                    r = this.handleEnd();
                    continue;
                }
            }
            this.addByte(n) || this.handleMessageMaxError();
        }
        return r;
    }, r.handleMessageMaxError = function() {
        this.onError && this.onError(this.msgBuffer.subarray(0), "The message is too large; the maximum message size is " + this.maxMessageSize / 1024 + "KB. Use a larger maxMessageSize if necessary."), 
        this.msgBufferIdx = 0, this.escape = !1;
    }, r.addByte = function(t) {
        return this.msgBufferIdx > this.msgBuffer.length - 1 && (this.msgBuffer = e.expandByteArray(this.msgBuffer)), 
        this.msgBuffer[this.msgBufferIdx++] = t, this.escape = !1, this.msgBuffer.length < this.maxMessageSize;
    }, r.handleEnd = function() {
        if (0 !== this.msgBufferIdx) {
            var t = e.sliceByteArray(this.msgBuffer, 0, this.msgBufferIdx);
            return this.onMessage && this.onMessage(t), this.msgBufferIdx = 0, t;
        }
    }, e;
}), function(t) {
    "use strict";
    function e() {}
    function r(t, e) {
        for (var r = t.length; r--; ) if (t[r].listener === e) return r;
        return -1;
    }
    function i(t) {
        return function() {
            return this[t].apply(this, arguments);
        };
    }
    function n(t) {
        return "function" == typeof t || t instanceof RegExp || !(!t || "object" != typeof t) && n(t.listener);
    }
    var s = e.prototype, o = t.EventEmitter;
    s.getListeners = function(t) {
        var e, r, i = this._getEvents();
        if (t instanceof RegExp) {
            e = {};
            for (r in i) i.hasOwnProperty(r) && t.test(r) && (e[r] = i[r]);
        } else e = i[t] || (i[t] = []);
        return e;
    }, s.flattenListeners = function(t) {
        var e, r = [];
        for (e = 0; e < t.length; e += 1) r.push(t[e].listener);
        return r;
    }, s.getListenersAsObject = function(t) {
        var e, r = this.getListeners(t);
        return r instanceof Array && ((e = {})[t] = r), e || r;
    }, s.addListener = function(t, e) {
        if (!n(e)) throw new TypeError("listener must be a function");
        var i, s = this.getListenersAsObject(t), o = "object" == typeof e;
        for (i in s) s.hasOwnProperty(i) && -1 === r(s[i], e) && s[i].push(o ? e : {
            listener: e,
            once: !1
        });
        return this;
    }, s.on = i("addListener"), s.addOnceListener = function(t, e) {
        return this.addListener(t, {
            listener: e,
            once: !0
        });
    }, s.once = i("addOnceListener"), s.defineEvent = function(t) {
        return this.getListeners(t), this;
    }, s.defineEvents = function(t) {
        for (var e = 0; e < t.length; e += 1) this.defineEvent(t[e]);
        return this;
    }, s.removeListener = function(t, e) {
        var i, n, s = this.getListenersAsObject(t);
        for (n in s) s.hasOwnProperty(n) && -1 !== (i = r(s[n], e)) && s[n].splice(i, 1);
        return this;
    }, s.off = i("removeListener"), s.addListeners = function(t, e) {
        return this.manipulateListeners(!1, t, e);
    }, s.removeListeners = function(t, e) {
        return this.manipulateListeners(!0, t, e);
    }, s.manipulateListeners = function(t, e, r) {
        var i, n, s = t ? this.removeListener : this.addListener, o = t ? this.removeListeners : this.addListeners;
        if ("object" != typeof e || e instanceof RegExp) for (i = r.length; i--; ) s.call(this, e, r[i]); else for (i in e) e.hasOwnProperty(i) && (n = e[i]) && ("function" == typeof n ? s.call(this, i, n) : o.call(this, i, n));
        return this;
    }, s.removeEvent = function(t) {
        var e, r = typeof t, i = this._getEvents();
        if ("string" === r) delete i[t]; else if (t instanceof RegExp) for (e in i) i.hasOwnProperty(e) && t.test(e) && delete i[e]; else delete this._events;
        return this;
    }, s.removeAllListeners = i("removeEvent"), s.emitEvent = function(t, e) {
        var r, i, n, s, o = this.getListenersAsObject(t);
        for (s in o) if (o.hasOwnProperty(s)) for (r = o[s].slice(0), n = 0; n < r.length; n++) !0 === (i = r[n]).once && this.removeListener(t, i.listener), 
        i.listener.apply(this, e || []) === this._getOnceReturnValue() && this.removeListener(t, i.listener);
        return this;
    }, s.trigger = i("emitEvent"), s.emit = function(t) {
        var e = Array.prototype.slice.call(arguments, 1);
        return this.emitEvent(t, e);
    }, s.setOnceReturnValue = function(t) {
        return this._onceReturnValue = t, this;
    }, s._getOnceReturnValue = function() {
        return !this.hasOwnProperty("_onceReturnValue") || this._onceReturnValue;
    }, s._getEvents = function() {
        return this._events || (this._events = {});
    }, e.noConflict = function() {
        return t.EventEmitter = o, e;
    }, "function" == typeof define && define.amd ? define(function() {
        return e;
    }) : "object" == typeof module && module.exports ? module.exports = e : t.EventEmitter = e;
}(this || {});

var osc = osc || require("./osc.js"), slip = slip || require("slip"), EventEmitter = EventEmitter || require("events").EventEmitter;

!function() {
    "use strict";
    osc.firePacketEvents = function(t, e, r, i) {
        e.address ? t.emit("message", e, r, i) : osc.fireBundleEvents(t, e, r, i);
    }, osc.fireBundleEvents = function(t, e, r, i) {
        t.emit("bundle", e, r, i);
        for (var n = 0; n < e.packets.length; n++) {
            var s = e.packets[n];
            osc.firePacketEvents(t, s, e.timeTag, i);
        }
    }, osc.fireClosedPortSendError = function(t, e) {
        e = e || "Can't send packets on a closed osc.Port object. Please open (or reopen) this Port by calling open().", 
        t.emit("error", e);
    }, osc.Port = function(t) {
        this.options = t || {}, this.on("data", this.decodeOSC.bind(this));
    };
    var t = osc.Port.prototype = Object.create(EventEmitter.prototype);
    t.constructor = osc.Port, t.send = function(t) {
        var e = Array.prototype.slice.call(arguments), r = this.encodeOSC(t), i = osc.nativeBuffer(r);
        e[0] = i, this.sendRaw.apply(this, e);
    }, t.encodeOSC = function(t) {
        t = t.buffer ? t.buffer : t;
        var e;
        try {
            e = osc.writePacket(t, this.options);
        } catch (t) {
            this.emit("error", t);
        }
        return e;
    }, t.decodeOSC = function(t, e) {
        t = osc.byteArray(t), this.emit("raw", t, e);
        try {
            var r = osc.readPacket(t, this.options);
            this.emit("osc", r, e), osc.firePacketEvents(this, r, void 0, e);
        } catch (t) {
            this.emit("error", t);
        }
    }, osc.SLIPPort = function(t) {
        var e = this, r = this.options = t || {};
        r.useSLIP = void 0 === r.useSLIP || r.useSLIP, this.decoder = new slip.Decoder({
            onMessage: this.decodeOSC.bind(this),
            onError: function(t) {
                e.emit("error", t);
            }
        });
        var i = r.useSLIP ? this.decodeSLIPData : this.decodeOSC;
        this.on("data", i.bind(this));
    }, (t = osc.SLIPPort.prototype = Object.create(osc.Port.prototype)).constructor = osc.SLIPPort, 
    t.encodeOSC = function(t) {
        t = t.buffer ? t.buffer : t;
        var e;
        try {
            var r = osc.writePacket(t, this.options);
            e = slip.encode(r);
        } catch (t) {
            this.emit("error", t);
        }
        return e;
    }, t.decodeSLIPData = function(t, e) {
        this.decoder.decode(t, e);
    }, osc.relay = function(t, e, r, i, n, s) {
        r = r || "message", i = i || "send", n = n || function() {}, s = s ? [ null ].concat(s) : [];
        var o = function(t) {
            s[0] = t, t = n(t), e[i].apply(e, s);
        };
        return t.on(r, o), {
            eventName: r,
            listener: o
        };
    }, osc.relayPorts = function(t, e, r) {
        var i = r.raw ? "raw" : "osc", n = r.raw ? "sendRaw" : "send";
        return osc.relay(t, e, i, n, r.transform);
    }, osc.stopRelaying = function(t, e) {
        t.removeListener(e.eventName, e.listener);
    }, osc.Relay = function(t, e, r) {
        (this.options = r || {}).raw = !1, this.port1 = t, this.port2 = e, this.listen();
    }, (t = osc.Relay.prototype = Object.create(EventEmitter.prototype)).constructor = osc.Relay, 
    t.open = function() {
        this.port1.open(), this.port2.open();
    }, t.listen = function() {
        this.port1Spec && this.port2Spec && this.close(), this.port1Spec = osc.relayPorts(this.port1, this.port2, this.options), 
        this.port2Spec = osc.relayPorts(this.port2, this.port1, this.options);
        var t = this.close.bind(this);
        this.port1.on("close", t), this.port2.on("close", t);
    }, t.close = function() {
        osc.stopRelaying(this.port1, this.port1Spec), osc.stopRelaying(this.port2, this.port2Spec), 
        this.emit("close", this.port1, this.port2);
    }, "undefined" != typeof module && module.exports && (module.exports = osc);
}();

var osc = osc || require("../osc.js");

!function() {
    "use strict";
    osc.WebSocket = "undefined" != typeof WebSocket ? WebSocket : require("ws"), osc.WebSocketPort = function(t) {
        osc.Port.call(this, t), this.on("open", this.listen.bind(this)), this.socket = t.socket, 
        this.socket && (1 === this.socket.readyState ? (osc.WebSocketPort.setupSocketForBinary(this.socket), 
        this.emit("open", this.socket)) : this.open());
    };
    var t = osc.WebSocketPort.prototype = Object.create(osc.Port.prototype);
    t.constructor = osc.WebSocketPort, t.open = function() {
        (!this.socket || this.socket.readyState > 1) && (this.socket = new osc.WebSocket(this.options.url)), 
        osc.WebSocketPort.setupSocketForBinary(this.socket);
        var t = this;
        this.socket.onopen = function() {
            t.emit("open", t.socket);
        };
    }, t.listen = function() {
        var t = this;
        this.socket.onmessage = function(e) {
            t.emit("data", e.data, e);
        }, this.socket.onerror = function(e) {
            t.emit("error", e);
        }, this.socket.onclose = function(e) {
            t.emit("close", e);
        }, t.emit("ready");
    }, t.sendRaw = function(t) {
        this.socket && 1 === this.socket.readyState ? this.socket.send(t) : osc.fireClosedPortSendError(this);
    }, t.close = function(t, e) {
        this.socket.close(t, e);
    }, osc.WebSocketPort.setupSocketForBinary = function(t) {
        t.binaryType = osc.isNode ? "nodebuffer" : "arraybuffer";
    };
}();

var osc = osc || {};

!function() {
    "use strict";
    osc.listenToTransport = function(t, e, r) {
        e.onReceive.addListener(function(e) {
            e[r] === t[r] && t.emit("data", e.data, e);
        }), e.onReceiveError.addListener(function(e) {
            t.emit("error", e);
        }), t.emit("ready");
    }, osc.emitNetworkError = function(t, e) {
        t.emit("error", "There was an error while opening the UDP socket connection. Result code: " + e);
    }, osc.SerialPort = function(t) {
        this.on("open", this.listen.bind(this)), osc.SLIPPort.call(this, t), this.connectionId = this.options.connectionId, 
        this.connectionId && this.emit("open", this.connectionId);
    };
    var t = osc.SerialPort.prototype = Object.create(osc.SLIPPort.prototype);
    t.constructor = osc.SerialPort, t.open = function() {
        var t = this, e = {
            bitrate: t.options.bitrate
        };
        chrome.serial.connect(this.options.devicePath, e, function(e) {
            t.connectionId = e.connectionId, t.emit("open", e);
        });
    }, t.listen = function() {
        osc.listenToTransport(this, chrome.serial, "connectionId");
    }, t.sendRaw = function(t) {
        if (this.connectionId) {
            var e = this;
            chrome.serial.send(this.connectionId, t.buffer, function(t, r) {
                r && e.emit("error", r + ". Total bytes sent: " + t);
            });
        } else osc.fireClosedPortSendError(this);
    }, t.close = function() {
        if (this.connectionId) {
            var t = this;
            chrome.serial.disconnect(this.connectionId, function(e) {
                e && t.emit("close");
            });
        }
    }, osc.UDPPort = function(t) {
        osc.Port.call(this, t);
        var e = this.options;
        e.localAddress = e.localAddress || "127.0.0.1", e.localPort = void 0 !== e.localPort ? e.localPort : 57121, 
        this.on("open", this.listen.bind(this)), this.socketId = e.socketId, this.socketId && this.emit("open", 0);
    }, (t = osc.UDPPort.prototype = Object.create(osc.Port.prototype)).constructor = osc.UDPPort, 
    t.open = function() {
        if (!this.socketId) {
            var t = this.options, e = {
                persistent: t.persistent,
                name: t.name,
                bufferSize: t.bufferSize
            }, r = this;
            chrome.sockets.udp.create(e, function(t) {
                r.socketId = t.socketId, r.bindSocket();
            });
        }
    }, t.bindSocket = function() {
        var t = this, e = this.options;
        void 0 !== e.broadcast && chrome.sockets.udp.setBroadcast(this.socketId, e.broadcast, function(e) {
            e < 0 && t.emit("error", new Error("An error occurred while setting the socket's broadcast flag. Result code: " + e));
        }), void 0 !== e.multicastTTL && chrome.sockets.udp.setMulticastTimeToLive(this.socketId, e.multicastTTL, function(e) {
            e < 0 && t.emit("error", new Error("An error occurred while setting the socket's multicast time to live flag. Result code: " + e));
        }), chrome.sockets.udp.bind(this.socketId, e.localAddress, e.localPort, function(e) {
            e > 0 ? osc.emitNetworkError(t, e) : t.emit("open", e);
        });
    }, t.listen = function() {
        var t = this.options;
        osc.listenToTransport(this, chrome.sockets.udp, "socketId"), t.multicastMembership && ("string" == typeof t.multicastMembership && (t.multicastMembership = [ t.multicastMembership ]), 
        t.multicastMembership.forEach(function(t) {
            chrome.sockets.udp.joinGroup(this.socketId, t, function(e) {
                e < 0 && this.emit("error", new Error("There was an error while trying to join the multicast group " + t + ". Result code: " + e));
            });
        }));
    }, t.sendRaw = function(t, e, r) {
        if (this.socketId) {
            var i = this.options, n = this;
            e = e || i.remoteAddress, r = void 0 !== r ? r : i.remotePort, chrome.sockets.udp.send(this.socketId, t.buffer, e, r, function(t) {
                t || n.emit("error", "There was an unknown error while trying to send a UDP message. Have you declared the appropriate udp send permissions in your application's manifest file?"), 
                t.resultCode > 0 && osc.emitNetworkError(n, t.resultCode);
            });
        } else osc.fireClosedPortSendError(this);
    }, t.close = function() {
        if (this.socketId) {
            var t = this;
            chrome.sockets.udp.close(this.socketId, function() {
                t.emit("close");
            });
        }
    };
}();